// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(auto()) @db.ObjectId @map("_id")
  fullName     String
  email        String @unique
  password     String
  phone        String
  dateOfBirth  DateTime
  patient      Patient?
}

model Patient {
  id           String @id @default(auto()) @db.ObjectId @map("_id")
  userId       String @db.ObjectId @unique
  user         User @relation(references: [id], fields: [userId])
  appointments Appointment[]
}

model Doctor {
  id                String @id @default(auto()) @db.ObjectId @map("_id")
  name              String
  field             String
  image             String
  focus             String
  profile           String
  careerPath        String
  highlight         String
  gender            Gender @default(male)
  experience        Int
  stars             Int @default(0)
  messages          Int @default(0)
  availables        Availability[]
  apponitments      Appointment[]
}

enum Gender {
  male
  female
}

model Availability {
  id        String @id @default(auto()) @db.ObjectId @map("_id")
  doctorId  String @db.ObjectId
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  date      DateTime
  startTime String
  endTime   String
  status    SlotStatus @default(available)
}

enum SlotStatus {
  available
  booked
  blocked
}

model Appointment {
  id                     String @id @default(auto()) @db.ObjectId @map("_id")
  // time       DateTime
  date                    DateTime
  startTime               String
  endTime                 String
  doctorId                String @db.ObjectId
  patientId               String @db.ObjectId
  doctor                  Doctor @relation(references: [id], fields: [doctorId])
  patient                 Patient @relation(references: [id], fields: [patientId])
  appointmentDescription  String
  person                  AppointmentPerson @default(self)
  status                  AppointmentStatus
}

enum AppointmentPerson {
  self
  another
}

enum AppointmentStatus {
  completed
  upcoming
  cancelled
}